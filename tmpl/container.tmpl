<?js
var isGlobal,
    containerTitle,
    self = this;

docs.forEach(function(doc, i) {
    isGlobal = doc.kind === 'globalobj';

    if (doc.kind === 'mainpage' || (doc.kind === 'package')) { ?>
        <?js= self.partial('mainpage.tmpl', doc) ?>

    <?js
    } else if (doc.kind === 'source') { ?>
        <?js= self.partial('source.tmpl', doc) ?>

    <?js
    } else {

        // title
        containerTitle = '';

        if (doc.ancestors && doc.ancestors.length) {
            containerTitle += '<span class="ancestors">'+ doc.ancestors.join('') +'</span>';
        }

        if (doc.name) {
            containerTitle += doc.name;
        }

        if (doc.variation) {
            containerTitle += '<sup class="variation">'+ doc.variation +'</sup>';
        }

        containerTitle = self.trim(containerTitle);


        // side items
        var sideItems = [];

        // classes
        var classes = self.find({kind: 'class', memberof: doc.longname});
        if (!isGlobal && classes && classes.length) {
            sideItems.push({
                title: 'Classes',
                renderer: function() {
                    return classes.map(function(c) {
                        return '<li>' + self.linkto(c.longname, c.name) + '</li>';
                    });
                }
            });
        }

        // namespaces
        var namespaces = self.find({kind: 'namespace', memberof: doc.longname});
        if (!isGlobal && namespaces && namespaces.length) {
            sideItems.push({
                title: 'Namespaces',
                renderer: function() {
                    return namespaces.map(function(n) {
                        return '<li>' + self.linkto(n.longname, n.name) + '</li>';
                    });
                }
            });
        }

        // augments
        if (doc.augments && doc.augments.length) {
            sideItems.push({
                title: 'Extends',
                renderer: function() {
                    return doc.augments.map(function(a) {
                        return '<li>' + self.linkto(a, a) + '</li>';
                    });
                }
            });
        }

        // requires
        if (doc.requires && doc.requires.length) {
            sideItems.push({
                title: 'Requires',
                renderer: function() {
                    return doc.requires.map(function(r) {
                        return '<li>' + self.linkto(r, r) + '</li>';
                    });
                }
            });
        }

        // mixes in
        if (doc.mixes && doc.mixes.length) {
            sideItems.push({
                title: 'Mixes In',
                renderer: function() {
                    return doc.mixes.map(function(a) {
                        return '<li>' + self.linkto(a, a) + '</li>';
                    });
                }
            });
        }

        //mixins
        var mixins = self.find({kind: 'mixin', memberof: doc.longname});
        if (!isGlobal && mixins && mixins.length) {
            sideItems.push({
                title: 'Mixins',
                renderer: function() {
                    return mixins.map(function(m) {
                        return '<li>' + self.linkto(m.longname, m.name) + '</li>';
                    });
                }
            });
        }

        var details = self.partial('details.tmpl', {
            doc: doc,
            hideProperties: true,
            hideTodo: true
        });

        sideItems = sideItems.map(function(item) {
            return '<h5>'+ item.title + '</h5><ul>' + item.renderer().join('') + '</ul>';
        }).join('');

        sideItems = self.trim(sideItems + details);
    ?>
        <div class="section">

            <?js if (sideItems) { ?>
                <div class="side-content">
                    <?js= sideItems ?>
                </div>
            <?js } ?>

            <?js if (containerTitle) { ?>
                <h2 class="container-title">
                    <?js= containerTitle ?>
                </h2>
            <?js } ?>

            <?js if (doc.classdesc) { ?>
                <div class="class-description"><?js= doc.classdesc ?></div>
            <?js } ?>

            <div class="container-overview">
                <?js if (doc.kind === 'module' && doc.module) { ?>
                    <?js= self.partial('method.tmpl', doc.module) ?>
                <?js } ?>

                <?js if (!doc.classdesc && doc.description) { ?>
                    <div class="description"><?js= doc.description ?></div>
                <?js } ?>

                <?js if (doc.examples && doc.examples.length) { ?>
                    <h3>Example<?js= doc.examples.length > 1? 's':'' ?></h3>
                    <?js= self.partial('examples.tmpl', doc.examples) ?>
                <?js } ?>
            </div>

            <div class="clearfix"></div>

            <?js
                var members = self.find({kind: 'member', memberof: isGlobal ? {isUndefined: true} : doc.longname});
                if (members && members.length && members.forEach) {
            ?>
                <h3 class="subsection-title">Members</h3>

                <dl><?js members.forEach(function(p) { ?>
                    <?js= self.partial('members.tmpl', p) ?>
                <?js }); ?></dl>
            <?js } ?>

            <?js
                var properties = doc.properties;
                if (properties && properties.length && properties.forEach) {
            ?>
                <h3 class="subsection-title">Properties:</h3>
                <?js= self.partial('properties.tmpl', properties) ?>
            <?js } ?>

            <?js
                var methods = self.find({kind: 'function', memberof: isGlobal ? {isUndefined: true} : doc.longname}),
                    hasMethods = methods && methods.length && methods.forEach;

                if (hasMethods || doc.kind === 'class') {
            ?>
                <h3 class="subsection-title">Methods</h3>

                <dl>
                    <?js if (doc.kind === 'class') { ?>
                        <?js= self.partial('method.tmpl', doc) ?>
                    <?js }?>
                    <?js methods.forEach(function(m) { ?>
                        <?js= self.partial('method.tmpl', m) ?>
                    <?js }); ?>
                </dl>
            <?js } ?>

            <?js
                var typedefs = self.find({kind: 'typedef', memberof: isGlobal ? {isUndefined: true} : doc.longname});
                if (typedefs && typedefs.length && typedefs.forEach) {
            ?>
                <h3 class="subsection-title">Type Definitions</h3>

                <dl><?js typedefs.forEach(function(e) {
                        if (e.signature) {
                    ?>
                        <?js= self.partial('method.tmpl', e) ?>
                    <?js
                        }
                        else {
                    ?>
                        <?js= self.partial('members.tmpl', e) ?>
                    <?js
                        }
                    }); ?></dl>
            <?js } ?>

            <?js
                var events = self.find({kind: 'event', memberof: isGlobal ? {isUndefined: true} : doc.longname});
                if (events && events.length && events.forEach) {
            ?>
                <h3 class="subsection-title">Events</h3>

                <dl><?js events.forEach(function(e) { ?>
                    <?js= self.partial('method.tmpl', e) ?>
                <?js }); ?></dl>
            <?js } ?>

        </div>
    <?js } ?>
<?js }); ?>
